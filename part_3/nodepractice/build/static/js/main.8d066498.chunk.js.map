{"version":3,"sources":["components/Note.js","services/notes.js","components/Notification.js","components/Footer.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","baseUrl","axios","get","then","response","data","newObject","post","id","put","Notification","message","Footer","style","color","fontStyle","fontSize","textAlign","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","setMessage","useEffect","noteService","initialNotes","notesToShow","filter","map","find","changedNote","returnedNote","console","log","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObj","date","Date","toISOString","Math","random","concat","value","onChange","target","type","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mMAceA,EAZF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACZC,EAAQF,EAAKG,UACb,qBAAuB,iBAE7B,OACI,qBAAIC,UAAU,OAAd,UACKJ,EAAKK,QACN,wBAAQC,QAASL,EAAjB,SAAoCC,Q,gBCP1CK,EAAU,aAiBD,EAfA,WAEX,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAa9B,EAVA,SAAAC,GAEX,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ9B,EALA,SAACG,EAAIF,GAEhB,OADgBL,IAAMQ,IAAN,UAAaT,EAAb,YAAwBQ,GAAMF,GAC/BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCF9BK,EAZM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACpB,OAAgB,OAAZA,EACO,KAIP,qBAAKd,UAAU,QAAf,SACKc,KCSEC,EAhBA,WAQX,OACI,sBAAKC,MARW,CAChBC,MAAO,QACPC,UAAW,SACXC,SAAU,GACVC,UAAW,UAIX,UACI,uBACA,2GCyEGC,EAhFH,WACV,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA8BJ,oBAAS,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KACA,EAA8BN,mBAAS,MAAvC,mBAAOR,EAAP,KAAgBe,EAAhB,KAEAC,qBAAU,WACRC,IAEGzB,MAAK,SAAA0B,GACJR,EAASQ,QAEZ,IAEH,IAyCMC,EAAcN,EAChBJ,EACAA,EAAMW,QAAO,SAAAtC,GAAI,OAAuB,IAAnBA,EAAKG,aAE9B,OACE,gCACE,uCACA,cAAC,EAAD,CAAce,QAASA,IACvB,yBAAQZ,QAAS,kBAAM0B,GAAYD,IAAnC,kBACQA,EAAU,YAAc,SAEhC,6BACGM,EAAYE,KAAI,SAAAvC,GAAI,OACnB,cAAC,EAAD,CAAoBA,KAAMA,EAAMC,iBAAkB,kBAtD/B,SAACc,GAC1B,IAAMf,EAAO2B,EAAMa,MAAK,SAAAxC,GAAI,OAAIA,EAAKe,KAAOA,KACtC0B,EAAW,2BAAQzC,GAAR,IAAcG,WAAYH,EAAKG,YAChDgC,EACUpB,EAAI0B,GACX/B,MAAK,SAAAgC,GACJC,QAAQC,IAAIF,GACZd,EAASD,EAAMY,KAAI,SAAAvC,GAAI,OAAIA,EAAKe,KAAOA,EAAKf,EAAO0C,SAEpDG,OAAM,SAAAC,GACLb,EAAW,YAAD,OACIjC,EAAKK,QADT,8CAGV0C,YAAW,WACTd,EAAW,QACV,KACHL,EAASD,EAAMW,QAAO,SAAAtC,GAAI,OAAIA,EAAKe,KAAOA,SAsCgBiC,CAAmBhD,EAAKe,MAArEf,EAAKe,SAGpB,uBAAMkC,SAhCM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAU,CACd/C,QAASwB,EACTwB,MAAM,IAAIC,MAAOC,cACjBpD,UAAWqD,KAAKC,SAAW,IAG7BtB,EACUiB,GACP1C,MAAK,SAAAgC,GACJd,EAASD,EAAM+B,OAAOhB,IACtBZ,EAAW,QAoBb,UACE,uBAAO6B,MAAO9B,EAAS+B,SAtCJ,SAACV,GACxBP,QAAQC,IAAIM,EAAMW,OAAOF,OACzB7B,EAAWoB,EAAMW,OAAOF,UAqCpB,wBAAQG,KAAK,SAAb,qBAEF,cAAC,EAAD,Q,MC5ENC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.8d066498.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Note = ({ note, toggleImportance }) => {\r\n    const label = note.important\r\n        ? 'make not important' : 'make important'\r\n\r\n    return (\r\n        <li className='note'>\r\n            {note.content}\r\n            <button onClick={toggleImportance}>{label}</button>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default Note","import axios from 'axios'\r\n//const baseUrl = 'https://safe-badlands-27100.herokuapp.com/api/notes'\r\nconst baseUrl = '/api/notes'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nexport default {\r\n    getAll: getAll,\r\n    create: create,\r\n    update: update\r\n}","import React from 'react'\r\n\r\nconst Notification = ({ message }) => {\r\n    if (message === null) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div className='error'>\r\n            {message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notification","import React from 'react'\r\n\r\nconst Footer = () => {\r\n    const footerStyle = {\r\n        color: 'green',\r\n        fontStyle: 'italic',\r\n        fontSize: 16,\r\n        textAlign: 'center'\r\n    }\r\n\r\n    return (\r\n        <div style={footerStyle}>\r\n            <br />\r\n            <em>Note app, Department of Computar Sicence, University of Helsinki 2021</em>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer","import React, { useState, useEffect } from 'react'\nimport Note from './components/Note'\nimport noteService from './services/notes'\nimport Notification from './components/Notification'\nimport Footer from './components/Footer'\n\nconst App = () => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(true)\n  const [message, setMessage] = useState(null)\n\n  useEffect(() => {\n    noteService\n      .getAll()\n      .then(initialNotes => {\n        setNotes(initialNotes)\n      })\n  }, [])\n\n  const toggleImportanceOf = (id) => {\n    const note = notes.find(note => note.id === id)\n    const changedNote = { ...note, important: !note.important }\n    noteService\n      .update(id, changedNote)\n      .then(returnedNote => {\n        console.log(returnedNote);\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n      })\n      .catch(error => {\n        setMessage(\n          `the note ${note.content} has already been deleted from the server`\n        )\n        setTimeout(() => {\n          setMessage(null)\n        }, 5000)\n        setNotes(notes.filter(note => note.id !== id))\n      })\n  }\n\n  const handleNoteChange = (event) => {\n    console.log(event.target.value)\n    setNewNote(event.target.value)\n  }\n\n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObj = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5,\n    }\n\n    noteService\n      .create(noteObj)\n      .then(returnedNote => {\n        setNotes(notes.concat(returnedNote))\n        setNewNote('')\n      })\n  }\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important === true)\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={message} />\n      <button onClick={() => setShowAll(!showAll)}>\n        show {showAll ? 'important' : 'all'}\n      </button>\n      <ul>\n        {notesToShow.map(note =>\n          <Note key={note.id} note={note} toggleImportance={() => toggleImportanceOf(note.id)} />\n        )}\n      </ul>\n      <form onSubmit={addNote}>\n        <input value={newNote} onChange={handleNoteChange} />\n        <button type='submit'>save</button>\n      </form>\n      <Footer />\n    </div>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}